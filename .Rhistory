ridx(sdf)
dbtable(sdf)
tblData(sdf)
bb
ridx(bb)
dbcon(bb)
bb1
ridx(bb1)
bb
tblData(bb)$lazy_query
is(tblData(bb)$lazy_query)
is(tblData(aa)$lazy_query)
is(tblData(x)$lazy_query)
is(tblData(x)$lazy_query, "lazy_base_query")
debug(saveSQLDataFrame)
saveSQLDataFrame(bb)
dbname
con
tbl
ridx(tbl)
ridx(x)
sql_cmd
db_sql_render(con, tbl)
dbListTables(con)
index
dbListTables(con)
dbReadTable(con, "r1_ridx")
ridx(x)
sql_drop
dbListTables(con)
con
dbListTables(con)
ridx(x)
dbListTables(con)
x
ridx(x)
saveSQLDataFrame(x)
con
dbcon(x)
tblData(x)
.open_tbl_from_connection(dbcon(x), )
Q
devtools::load_all()
.open_tbl_from_connection
debug(saveSQLDataFrame)
saveSQLDataFrame(x)
devtools::load_all()
debug(saveSQLDataFrame)
saveSQLDataFrame(x)
con <- dbcon(x)
tbl <- .open_tbl_from_connection(con, x)
tbl <- .extract_tbl_from_SQLDataFrame_indexes(tblData(x), x)
tbl
        sql_cmd <- build_sql("CREATE TABLE ", sql(dbtable), " AS ", db_sql_render(con, tbl), con = con)
sql_cmd
        dbExecute(con, sql_cmd)
dbListTables(con)
dbtable
dbReadTable(con, "x")
dbcon(x)@dbname
dbname
dbListTables(con)
dbListTables(con)
con
dbListTables(con)
ridx(x)
Q
devtools::load_all()
debug(saveSQLDataFrame)
saveSQLDataFrame(x)
tbl
ridx(x)
dbListTables(con)
dbListTables(con)
dbListTables(con)
dbListTables(con)
saveSQLDataFrame(aa)
tbl
ridx(x)
tblData(x)
ridx(x)
debug(.extract_tbl_from_SQLDataFrame_indexes)
ridx
ridx
tbl
dbconcatKey(sdf)
ridx
dbkey(sdf)
ridx
tbl
tblData(x)
tbl
tblData(x)
dbListTable(con)
dbListTables(con)
dbReadTable(con, "aa")
x
cc
cc
tblData(x)
tbl
aa
Q
undebug(.extract_
aa
Q
undebug(.extract_tbl_from_SQLDataFrame_indexes)
aa
tblData(aa)
ridx(aa)
.printROWS(aa, ridx(aa))
tblData(x)
dim(x)
tblData(aa)
x
tblData(x)
tblData(obj)
ridx(x)
ridx(obj)
aa
Q
undebug(saveSQLDataFrame)
aa1
x
y
tblData(aa1)
ridx(aa1)
ridx(bb)
bb
dbtable(bb)
dbcon(bb)
bb1
ridx(bb1)
x
y
z
dbtable(bb1)
dbcon(bb1)
con1
con2
ss11
ss21
ridx(ss11)
ridx(ss21)
debug(.join_union_prepare_sqlite)
obj1 <- union(ss11, ss21)
tblx
debug(.open_tbl_from_connection)
obj1 <- union(ss11, ss21)
debug(.attachMaybe_and_open_tbl_in_new_connection_
debug(.attachMaybe_and_open_tbl_in_new_connection)
obj1 <- union(ss11, ss21)
dbs
dbname
aux
aux
obj1 <- union(ss11, ss21)
obj1 <- union(ss11, ss21)
obj1 <- union(ss11, ss21)
obj1 <- union(ss11, ss21)
con
aux
sdf
debug(.open_tbl_from_connection)
obj1 <- union(ss11, ss21)
aux
con
.open_tbl_from_connection(con, sdf)
devtools::load_all()
obj1 <- union(ss11, ss21)
traceback()
devtools::load_all()
obj1 <- union(ss11, ss21)
obj1
ridx(obj1)
tblData(obj2)
tblData(obj1)
ss11
ss21
ridx(ss11)
ridx(ss21)
aa
x
y
bb
ridx(bb)
obj2
ridx(obj2)
ss11
ss21
tblData(obj2)
tblData(obj1)
identical(tblData(obj2), tblData(obj1))
all.equal(tblData(obj2), tblData(obj1))
ss12
ss22
devtools::check()
q()
n
devtools::load_all()
devtools::test()
dbcon(u1)@dbname
remote_name(u1)
remote_name(tblData(u1))
remote_table(tblData(u1))
library(dbplyr)
remote_table(tblData(u1))
remote_name(tblData(u1))
dbcon(u1)
dbcon(u1)@dbname
dbcon(obj01)@dbname
dbcon(u2)@dbname
dbcon(obj01)@dbname
u3
ridx(u3)
dbtable(u2)
dbtable(obj21)
join(x, y)
ls()
obj
tblData(obj)
ls()
ls()
.dblist(u2)
.dblist(dbcon(u2))
q()
n
devtools::load_all()
u3
.dblist(dbcon(u3))
.dblist(dbcon(u2))
debug(.join_union_prepare_sqlite)
dbcon(x)
dbcon(y)
.dblist(dbcon(y))
.dblist(dbcon(x))
.dblist(dbcon(x))$name
.dblist(dbcon(y))$name
dbs_xcon
dbs_ycon)
dbs_ycon
dbs_xcon[dbs_xcon != ""]
dbs_xcon
dbs_xcon
dbs_ycon
dbs_xcon
length(dbs_xcon)
length(dbs_ycon)
any(length(dbs_xcon)>1, length(dbs_ycon)>1)
all(length(dbs_xcon)>1, length(dbs_ycon)>1)
dbtable
Q
devtools::load_all()
debug(.join_union_prepare_sqlite)
con
Q
devtools::load_all()
debug(.join_union_prepare_sqlite)
dbcon(x)
dbcon(y)
u3
u4
tblData(u3)
tblData(u4)
identical(tblData(u3), tblData(u4))
all.equal(tblData(u3), tblData(u4))
tblData(u3)
tblData(u4)
ridx(u3)
ridx(u4)
.dbcon(dbcon(u3)
)
dbcon(u3
)
dbcon(u4)
identical(dbcon(u3), dbcon(u4))
r1
ridx(r1)
tblData(r1)
as.data.frame(r1)
as.data.frame(tblData(r1))
dbcon(u1)
Q
undebug(.join_union_prepare_sqlite)
dbcon(u1)@dbname
dbcon(r1)@dbname
dbcon(r2)@dbname
?normalizePath
dir(dbcon(r1)@dbname)
dirname(dbcon(r1)@dbname)
basename(dbcon(r1)@dbname)
normalizePath(dirname(dbcon(r1)@dbname))
normalizePath(dbcon(r1)@dbname)
r2
r1
obj11
obj21
as.data.frame(r3)
as.data.frame(r2)
dim(r2)
rbind(as.data.frame(r1), as.data.frame(obj21))
identical(as.data.frame(r2), rbind(as.data.frame(r1), as.data.frame(obj21)))
all.equal(as.data.frame(r2), rbind(as.data.frame(r1), as.data.frame(obj21)))
as.data.frame(r2, row.names=NULL)
all.equal(as.data.frame(r2), rbind(as.data.frame(r1), as.data.frame(obj21)), check.attributes = FALSE)
all.equal(as.data.frame(r2), rbind(as.data.frame(r1), as.data.frame(obj21)), all.names=FALSE)
?all.equal
?identical
expect_equal(as.data.frame(r2), rbind(as.data.frame(r1), as.data.frame(obj21)), all.names=FALSE)
expect_equal(as.data.frame(r2), rbind(as.data.frame(r1), as.data.frame(obj21)), all.names=FALSE)
ridx(r4)
ridx(r1)
ridx(r11)
dbcon(r1)
dbListTables(dbcon(r1))
debug(saveSQLDataFrame)
dbname
con
dbListTables(con)
tbl
dim(tbl)
dbListTables(con)
index
dbListTables(con)
?dbWriteTable
devtools::load_all()
ls()
.msg_saveSQLDataFrame
devtools::load_all()
ls()
dbcon(r11)
dbListTables(dbcon(r11))
devtools::test()
exp
obj[["sampleID"]]
devtools::test()
devtools::check()
ls()
obj
tblData(obj)
tblData(obj)$lazy_query
tblData(u1)$lazy_query
db_query(tblData(u1))
db_remote_query(tblData(u1))
library(dbplyr)
db_remote_query(tblData(u1))
remote_name(tblData(u1))
remote_name(tblData(obj))
remote_query(tblData(u1))
is(remote_query(tblData(u1)))
remote_query_plan(tblData(u1))
remote_table(tblData(u1))
remote_name(tblData(u1))
remote_name(tblData(obj1))
remote_name
dbplyr:::is_lazy_select_query_simple(tblData(u1)$lazy_query)
dbplyr:::is_lazy_select_query_simple
is.null(remote_name(tblData(u1)))
dbtable(u1)
devtools::load_all()
select
showMethods("select")
dbplyr::select
dplyr::select
op_vars
dbplyr::op_vars
search()
ls(8)
?op_vars
op_vars(tblData(u1)$lazy_query)
op_grps(tblData(u1)$lazy_query)
select.list
dplyr::select
devtools::document()
devtools::run_examples()
devtools::loaded_packages()
obj3
obj4
obj4
obj4
tbind(ss11, obj2)
rbind(ss11, obj2)
ls()
rm(list=ls())
dbListTables(con1)
dbListTables(con2)
dbListTables(conn)
obj
obj
.dblist(dbcon(obj2))
)
aa <- rbind(obj[c(1,3,5), ], obj[c(2,4,6), ]) 
aa
.dblist(dbcon(aa))
.dblist(dbcon(obj4))
rm(obj4)
traceback()
debug(.join_union_prepare_sqlite)
dbs_xcon
dbs_ycon
con
tblx
debug(.attachMaybe_and_open_tbl_in_new_connection)
dbs
aux
debug(.open_tbl_from_connection)
auxSchema
tbl(con, auxSchema)
auxSchema
ident(dbtable(sdf))
Q
aa
ridx(aa)
dbcon(aa)
.dblist(tblData(aa))
.dblist()
tblData(aa)
ridx(aa)
aa
?try
tblname <- tryCatch(dbtable(u1))
tblname <- tryCatch(dbtable(obj2))
inherits(tblname, "warning")
?inherits
?tryCatch
tryCatch(1)
tryCatch(dbtable(obj2))
tryCatch(dbtable(obj2))
inherits(tblname)
is(tblname)
tblname
tblname <- tryCatch(dbtable(obj2))
tblname <- tryCatch(dbtable(obj2), error=identity)
is(tblname)
tblname <- tryCatch(dbtable(obj2), error=identity)
?tryCatch
tblname <- tryCatch(dbtable(obj2), warning=identity)
e
w
tblname <- tryCatch(dbtable(obj2), error=identity)
tblname <- tryCatch(dbtable(obj2), warning="warning dbtable")
tblname <- tryCatch(dbtable(obj2), warning=function(w) message("warning dbtable"))
inherits(tblname, "
is(tblname)
inherits(tblname, "warning")
inherits(tblname, "error")
tblname <- tryCatch(dbtable(obj2), warning=function(w) message("warning dbtable"), finally = {stop("stop")})
tblname <- tryCatch(dbtable(obj2), warning=function(w) message("warning dbtable"), finally = {stop("stop going")})
devtools::load_all()
devtools::load_all()
.msg_realizeSQLDataFrame
stop
stop()
devtools::load_all()
ls()
rm(list=ls())
ls()
r1
devtools::test()
debug(.join_union_prepare_sqlite)
length(dbs_xcon)
dbs_ycon
y
ridx(y)
Q
rm(list=ls())
devtools::test()
q()
n
devtools::load_all()
devtools::test()
debug(.join_union_prepare_sqlite)
x
y
dbs_xcon
dbs_ycon
con
.dblist(con)
.dblist(con)
dbs_xcon
dbs_ycon
dbs_xcon
dbs_ycon
debug(.open_tbl_from_connection)
tblname
dbtable(sdf)
ridx(sdf)
auxSchema
res_tbl
dbcon(res_tbl)
remote_con(res_tbl)
.dblist(con)
res_tbl
r5
devtools::test()
con
.dblist(con)
r5
q()
n
