% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/joinSQLDataFrame.R
\name{left_join}
\alias{left_join}
\alias{left_join.SQLDataFrame}
\alias{left_join,SQLDataFrame-method}
\alias{inner_join}
\alias{inner_join.SQLDataFrame}
\alias{inner_join,SQLDataFrame-method}
\alias{semi_join}
\alias{semi_join.SQLDataFrame}
\alias{semi_join,SQLDataFrame-method}
\alias{anti_join}
\alias{anti_join.SQLDataFrame}
\alias{anti_join,SQLDataFrame-method}
\title{join \code{SQLDataFrame} together}
\usage{
\method{left_join}{SQLDataFrame}(x, y, by = NULL, copy = FALSE, suffix = c("_x", "_y"), ...)

\method{inner_join}{SQLDataFrame}(x, y, by = NULL, copy = FALSE, suffix = c("_x", "_y"), ...)

\method{semi_join}{SQLDataFrame}(x, y, by = dbkey(x), copy = FALSE, ...)

\method{anti_join}{SQLDataFrame}(x, y, by = dbkey(x), copy = FALSE, ...)
}
\arguments{
\item{x}{\code{SQLDataFrame} objects to join.}

\item{y}{\code{SQLDataFrame} objects to join.}

\item{by}{A character vector of variables to join by.  If ‘NULL’,
the default for \code{left_join} and \code{inner_join},
‘*_join()’ will do a natural join, using all variables with
common names across the two tables. For the filtering joins
\code{semi_join} ad \code{anti_join}, by default, it uses
\code{dbkey(x)} as common variables for joining. See
\code{?dplyr::join} for more details.}

\item{copy}{Only kept for S3 generic/method consistency. Used as
"copy = FALSE" internally and not modifiable.}

\item{suffix}{A character vector of length 2 specify the suffixes
to be added if there are non-joined duplicate variables in ‘x’
and ‘y’. Default values are ".x" and ".y".See
\code{?dplyr::join} for details.}

\item{...}{Other arguments passed on to \code{*_join}
methods.}
}
\value{
A \code{SQLDataFrame} object.
}
\description{
*_join functions for \code{SQLDataFrame} objects. Will
    not preserve the arbitrary orders or duplicate rows for the
    input SQLDataFrame.
}
\examples{
test.db <- system.file("extdata", "test.db", package = "SQLDataFrame")
con <- DBI::dbConnect(DBI::dbDriver("SQLite"), dbname = test.db)
obj <- SQLDataFrame(conn = con,
                    dbtable = "state",
                    dbkey = c("region", "population"))
obj1 <- obj[1:10, 1:2]
obj2 <- obj[8:15, 2:3]
left_join(obj1, obj2)
inner_join(obj1, obj2)
semi_join(obj1, obj2)
anti_join(obj1, obj2)
}
