% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unionSQLDataFrame.R
\name{union}
\alias{union}
\alias{union,SQLDataFrame,SQLDataFrame-method}
\title{Union of \code{SQLDataFrame} objects}
\usage{
\S4method{union}{SQLDataFrame,SQLDataFrame}(x, y, copy = FALSE, ...)
}
\arguments{
\item{x}{A \code{SQLDataFrame} object.}

\item{y}{A \code{SQLDataFrame} object.}

\item{...}{Other arguments passed on to methods.}
}
\value{
A \code{SQLDataFrame} object.
}
\description{
Performs union operations on \code{SQLDataFrame}
    objects.
}
\details{
The \code{union} function supports aggregation of
    SQLDataFrame objects from same connections. 

    For SQLite and MySQL connections, \code{union} drops all
    duplicate and return only distinct rows.

    For BigQuery connections, \code{union} only drops duplicate
    rows inside the to-be-joined SQLDataFrame objects, but
    preserves the overlapping rows between the input SQLDataFrame
    objects.
}
\examples{
test.db <- system.file("extdata/test.db", package = "SQLDataFrame")
con <- DBI::dbConnect(DBI::dbDriver("SQLite"), dbname = test.db)
obj <- SQLDataFrame(conn = con,
                    dbtable = "state",
                    dbkey = c("region", "population"))
obj_sub1 <- obj[1:10, 2:3]
obj_sub2 <- obj[8:15, 2:3]

## union
res_union <- union(obj_sub1, obj_sub1)  ## sorted
res_union
dim(res_union)
}
