% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SQLDataFrame-methods.R
\docType{methods}
\name{\code{SQLDataFrame} methods}
\alias{\code{SQLDataFrame} methods}
\alias{head}
\alias{head,SQLDataFrame-methods}
\alias{tail,SQLDataFrame-method}
\alias{tail}
\alias{tail,SQLDataFrame-methods}
\alias{dim,SQLDataFrame-method}
\alias{dim}
\alias{dim,SQLDataFrame-methods}
\alias{dimnames,SQLDataFrame-method}
\alias{dimnames}
\alias{dimnames,SQLDataFrame-methods}
\alias{length,SQLDataFrame-method}
\alias{length}
\alias{length,SQLDataFrame-methods}
\alias{names,SQLDataFrame-method}
\alias{names}
\alias{filter.SQLDataFrame}
\alias{filter}
\alias{filter,SQLDataFrame-methods}
\alias{mutate.SQLDataFrame}
\alias{mutate}
\alias{mutate,SQLDataFrame-methods}
\title{Create or transform variables}
\usage{
\S4method{head}{SQLDataFrame}(x, n = 6L)

\S4method{tail}{SQLDataFrame}(x, n = 6L)

\S4method{dim}{SQLDataFrame}(x)

\S4method{dimnames}{SQLDataFrame}(x)

\S4method{length}{SQLDataFrame}(x)

\S4method{names}{SQLDataFrame}(x)

\method{filter}{SQLDataFrame}(.data, ...)

\method{mutate}{SQLDataFrame}(.data, ...)
}
\arguments{
\item{x}{A \code{SQLDataFrame} object}

\item{.data}{A \code{SQLDataFrame} object.}

\item{...}{In \code{filter()}: Logical predicates defined in terms
of the variables in ‘.data’. Multiple conditions are combined
with ‘&’. Only rows where the condition evaluates to ‘TRUE’ are
kept. See \code{?dplyr::filter} for more details.}

\item{...}{In \code{mutate()}: Name-value pairs of expressions,
each with length 1 or the same length as the number of rows in
the group (if using ‘group_by()’) or in the entire input (if
not using groups). The name of each argument will be the name
of a new variable, and the value will be its corresponding
value. Use a ‘NULL’ value in ‘mutate’ to drop a variable.  New
variables overwrite existing variables of the same name.}
}
\value{
\code{head, tail}: An \code{SQLDataFrame} object with
    certain rows.

\code{dim}: interger vector

\code{dimnames}: A list of character vectors.

\code{length}: An integer

\code{names}: A character vector

\code{filter}: A \code{SQLDataFrame} object with subset
    rows of the input SQLDataFrame object matching conditions.

\code{mutate}: A SQLDataFrame object.
}
\description{
\code{head, tail}: Retrieve the first / last n rows of
    the \code{SQLDataFrame} object. See \code{?S4Vectors::head} for
    more details.

\code{dim, dimnames, length, names}: Retrieve the
    dimension, dimension names, number of columns and colnames of
    SQLDataFrame object.

Use \code{filter()} to choose rows/cases where
    conditions are true.

\code{mutate()} adds new columns and preserves
    existing ones; It also preserves the number of rows of the
    input. New variables overwrite existing variables of the same
    name.
}
\examples{

## basic methods
dbname <- system.file("extdata/test.db", package = "SQLDataFrame")
obj <- SQLDataFrame(dbname = dbname, dbtable = "state", dbkey = "state")
dim(obj)
dimnames(obj)
length(obj)
names(obj)

## filter & mutate
dbfile <- system.file("extdata/test.db", package = "SQLDataFrame")
obj <- SQLDataFrame(dbname = dbfile, dbtable = "state", dbkey = "state")
obj1 <- obj \%>\% filter(region == "West" & size == "medium")
obj1
obj \%>\% mutate(p1 = population / 10)
obj \%>\% mutate(s1 = size)
}
